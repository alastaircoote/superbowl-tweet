// Generated by CoffeeScript 1.6.2
(function() {
  map.create3DView = function(shapes) {
    var angle, axis, camera, directionalLight, directionalLight2, filtered, height, i, matrix, parentMesh, plane, planeGeom, render, renderer, scene, shape, st, states, svgholder, webgl, width, _i, _len;

    svgholder = document.getElementsByClassName("svgholder")[0];
    width = svgholder.clientWidth - 20;
    height = width * 0.6;
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);
    camera.position.set(142, -354, 435);
    camera.rotation.set(0.6, 0.27, 0.05);
    scene.add(camera);
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(width, height);
    $(window).on("resize", function() {
      width = svgholder.clientWidth - 20;
      height = width * 0.6;
      return renderer.setSize(width, height);
    });
    webgl = document.createElement("div");
    webgl.id = "webgl";
    $(".svgholder").append(webgl);
    webgl.appendChild(renderer.domElement);
    directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
    directionalLight.position.set(50, 50, 200);
    scene.add(directionalLight);
    directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.9);
    directionalLight2.position.set(300, -250, 20);
    scene.add(directionalLight2);
    render = function() {
      TWEEN.update();
      requestAnimationFrame(render);
      return renderer.render(scene, camera);
    };
    parentMesh = new THREE.Mesh();
    axis = new THREE.Vector3(1, 0, 0);
    angle = Math.PI;
    matrix = new THREE.Matrix4().makeRotationAxis(axis, angle);
    parentMesh.applyMatrix(matrix);
    scene.add(parentMesh);
    shape = new THREE.Shape();
    shape.moveTo(0, 0);
    shape.lineTo(width, 0);
    shape.lineTo(width, height);
    shape.lineTo(0, height);
    shape.closePath();
    planeGeom = new THREE.PlaneGeometry(width * 3, height * 3);
    THREE.GeometryUtils.center(planeGeom);
    plane = new THREE.Mesh(planeGeom, new THREE.MeshBasicMaterial({
      color: 'white'
    }));
    plane.position.set(0, 0, -1);
    scene.add(plane);
    console.log(shapes);
    filtered = shapes[0].filter(function(s) {
      return s.attributes.d;
    });
    states = {};
    for (i = _i = 0, _len = filtered.length; _i < _len; i = ++_i) {
      shape = filtered[i];
      st = new map.State3D(shape);
      parentMesh.add(st.shape);
      states[shape.attributes.statename.value] = st;
    }
    render();
    return map.states = states;
  };

}).call(this);
