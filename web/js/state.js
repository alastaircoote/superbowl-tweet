// Generated by CoffeeScript 1.6.2
(function() {
  var State,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  State = (function() {
    State.prototype.makeMaterial = function(i) {
      return new THREE.MeshLambertMaterial({
        color: parseInt('0x' + this.broncoColor.towards(this.seahawkColor, i).toString().substr(1)),
        wireframe: false,
        overdraw: false
      });
    };

    State.prototype.broncoColor = new Chromath("#FF6600");

    State.prototype.seahawkColor = new Chromath("#003399");

    function State(shape) {
      this.tweenComplete = __bind(this.tweenComplete, this);
      this.setColorProgression = __bind(this.setColorProgression, this);
      this.raiseUp = __bind(this.raiseUp, this);
      this.convertShape = __bind(this.convertShape, this);
      this.makeMaterial = __bind(this.makeMaterial, this);
      var individualShapes, point, points, _i, _j, _len, _len1;

      points = shape.attributes.d.value.split(/(?=[A-Z])/).map(function(val) {
        var spl;

        spl = val.split(",");
        return [spl[0][0], parseFloat(spl[0].slice(1)), parseFloat(spl[1])];
      });
      individualShapes = [];
      this.material = new THREE.MeshLambertMaterial({
        wireframe: false,
        color: 0xcccccc
      });
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        if (point[0] === "M") {
          individualShapes.push([]);
        }
        individualShapes[individualShapes.length - 1].push(point);
      }
      if (individualShapes.length === 1) {
        this.shape = this.convertShape(individualShapes[0]);
      } else {
        this.shape = new THREE.Mesh();
        for (_j = 0, _len1 = individualShapes.length; _j < _len1; _j++) {
          shape = individualShapes[_j];
          this.shape.add(this.convertShape(shape));
        }
      }
      this.tween = new TWEEN.Tween(this.shape.position);
      this.tween.onComplete(this.tweenComplete);
    }

    State.prototype.convertShape = function(points) {
      var geometry, mesh, point, shape, _i, _len;

      shape = new THREE.Shape();
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        if (point[0] === "M") {
          shape.moveTo(point[1], point[2]);
        } else if (point[0] === "L") {
          shape.lineTo(point[1], point[2]);
        } else if (point[0] === "Z") {
          shape.closePath();
        } else {
          throw new Error(point[0]);
        }
      }
      geometry = new THREE.ExtrudeGeometry(shape, {
        size: 10,
        amount: 100,
        bevelEnabled: false,
        steps: 1
      });
      geometry.computeBoundingBox();
      mesh = new THREE.Mesh(geometry, this.material);
      mesh.position.set(-480, -250, 0);
      return mesh;
    };

    State.prototype.raiseUp = function(a, b) {
      var target;

      this.setColorProgression(a, b);
      this.tween.stop();
      target = this.shape.position.z - 30;
      if (target < -100) {
        target = -100;
      }
      return this.tween.to({
        x: this.shape.position.x,
        y: this.shape.position.y,
        z: target
      }, 200).start();
    };

    State.prototype.setColorProgression = function(a, b) {
      var color;

      color = new Chromath("#cccccc");
      if (a > b) {
        color = color.towards(this.seahawkColor, a / (a + b));
      }
      if (b > a) {
        color = color.towards(this.broncoColor, b / (a + b));
      }
      return this.material.setValues({
        color: parseInt('0x' + color.toString().substr(1))
      });
    };

    State.prototype.tweenComplete = function(d) {
      if (this.shape.position.z <= -30) {
        return this.tween.to({
          x: this.shape.position.x,
          y: this.shape.position.y,
          z: 0
        }, 1500).start();
      }
    };

    return State;

  })();

  map.State3D = State;

}).call(this);
